@page "/Purchase/"

@using PayDec.Client.Shared.Components
@using PayDec.Shared.Model
@using PayDec.Client.Services.Repository.Interfaces
@using PayDec.Shared.Model.Interfaces
@using PayDec.Client.Services.Repository
@using System.Text.Json;

@inject IRepository Repo
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<div class="purchaseCardWrapper d-flex" style="flex-direction:row;flex-wrap: wrap;">

    @foreach (var item in Items)
    {
        if (item is Item)
        {

            string css = $@"
    width: clamp(10vw,15vw,18vw);
    height: 30vh;
    margin:10px;
    background-size: contain;
    background-repeat: no-repeat;";

            <Card Title="@((item as Item)?.Name)" PrimaryButton="() => BuyItem(item)" SecondaryButton="() => ShowDetails(item)" ImageName="@((item as Item)?.ItemImage)" CardCss="@css">
                <PrimaryButtonContent>
                    <div class="purchaseBtn" style="border-radius: 100%;background-color: #003049;height: 2.5em;width: 2.5em;display: flex;justify-content: center;align-items:center;">
                        <i style="font-size:1.3em;color:white;" class="bi bi-bag-fill"></i>
                    </div>
                </PrimaryButtonContent>
                <SecondaryButtonContent>
                    <div class="purchaseBtn" style="border-radius: 100%;background-color: #003049;height: 2.5em;width: 2.5em;display: flex;justify-content: center;align-items:center;">
                        <i style="font-size:2.0em;color:white;" class="bi bi-info"></i>
                    </div>
                </SecondaryButtonContent>
            </Card>


        }
    }
</div>

@if (BuyModalOpened)
{
    <Modal Title="@((CurrentItem as Item)?.Name)" PrimaryButton="ConfirmPurchase" CloseButton="CloseDetails" PrimaryButtonText="Buy">
        <ChildContent>
            <p>Choose amount the amount to buy</p>
            <select class="form-select" @bind="AmountToPurchase">
                <option value="1" selected>1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
            </select>
        </ChildContent>
    </Modal>
}

@{
    @if (DetailsModalOpened)
    {
        Item? item = CurrentItem as Item;
        <Modal Title="@item?.Name" PrimaryButton="() => {}" CloseButton="CloseDetails">
            @(item?.Description ?? "")
        </Modal>
    }
}


@code {
    List<Item> Items { get; set; } = new List<Item>();

    public bool BuyModalOpened { get; set; } = false;
    public bool DetailsModalOpened { get; set; } = false;

    public Item CurrentItem { get; set; }
    public int AmountToPurchase { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        Items = (await (Repo as Repository).IndexAsync(typeof(Item))).Cast<Item>().ToList();

        base.OnInitialized();
    }

    private void BuyItem(IPDObject item)
    {
        BuyModalOpened = true;
        CurrentItem = item as Item;
        this.StateHasChanged();
    }

    private async Task ConfirmPurchase()
    {
        string itemsAsJson = await localStorage.GetItemAsync<string>("ItemsToBuy");
        var list = new List<Tuple<Item, int>>();

        if(itemsAsJson == null)
        {
            list.Add(new Tuple<Item, int>(CurrentItem, AmountToPurchase));
            string newItemsAsJson = JsonSerializer.Serialize(list);
            await localStorage.SetItemAsync<string>("ItemsToBuy", newItemsAsJson);
        }
        else{
            list = JsonSerializer.Deserialize<List<Tuple<Item, int>>>(itemsAsJson);
            list.Add(new Tuple<Item, int>(CurrentItem, AmountToPurchase));
            string newItemsAsJson = JsonSerializer.Serialize(list);
            await localStorage.SetItemAsync("ItemsToBuy", newItemsAsJson);
        }
        AmountToPurchase = 1;
        BuyModalOpened = false;
        this.StateHasChanged();
    }

    private void ShowDetails(IPDObject item)
    {
        DetailsModalOpened = true;
        CurrentItem = item as Item;
        this.StateHasChanged();
    }

    private void CloseDetails()
    {
        if (BuyModalOpened)
            BuyModalOpened = false;
        else if (DetailsModalOpened)
            DetailsModalOpened = false;

        AmountToPurchase = 1;
    }
}

@page "/Purchasesubmit/"

@using PayDec.Client.Shared.Components
@using PayDec.Shared.Model.Interfaces
@using System.Text.Json;
@using PayDec.Client.Services.Repository.Interfaces;
@using PayDec.Shared.Model;
@using PayDec.Shared.Model.ViewModel
@using PayDec.Client.Services.Repository
@using MetaMask.Blazor
@using Nethereum.ABI.Model
@using Nethereum.Web3
@using System.Numerics;
@using Nethereum.ABI.FunctionEncoding;
@using Nethereum.ABI.Model;

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IRepository repo

@*@if(Submited)
{
    <h1>Your Order has been submitted. You will get your Items as soon as possible!</h1>
}*@
<Table @ref="table" SelectedProperties="@Properties" Data="@(BoughtItems.Cast<IPDObject>().ToList())"></Table>

@if(BoughtItems.Count() == 0)
{
    <h1 style="display:flex;justify-content:center;">No Items selected so far :(</h1>
}
else
{
    <button class="btn btn-primary LoginBtn" @onclick="() =>SubmitModalOpened = true">Submit Purchase</button>
}

@if (SubmitModalOpened)
{
    <Modal Title="Confirmation" PrimaryButton="SubmitPurchase" CloseButton="CloseDetails" PrimaryButtonText="Buy">
        <ChildContent>
            <div style="width:90%;display:flex;flex-align: column;" class="form-group">
                <label>Press Confirm to confirm your Purchase with MetaMask</label>
            </div>
        </ChildContent>
    </Modal>
}

@code {
    public List<string> Properties = new List<string>() { "Name", "Amount", "Price", "TotalPrice" };

    public List<PurchasedTableElement> BoughtItems { get; set; } = new();

    private bool Submited { get; set; } = false;

    private bool SubmitModalOpened { get; set; } = false;

    public string Adress { get; set; } = "";

    Table table { get; set; }

    [Inject]
    public IMetaMaskService MetaMaskService { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        string itemsAsJson = await localStorage.GetItemAsync<string>("ItemsToBuy");
        if(itemsAsJson != null)
        {
            List<Tuple<Item, int>> deserializedList = JsonSerializer.Deserialize<List<Tuple<Item, int>>>(itemsAsJson) ?? new();

            foreach (Tuple<Item, int> item in deserializedList)
            {
                BoughtItems.Add(new PurchasedTableElement()
                {
                    Amount = item.Item2,
                    Name = item.Item1.Name,
                    Price = item.Item1.Price,
                    ItemId = item.Item1.Id,
                });
            }
        }

        bool hasMetaMask = false;
        bool isSiteConnected = false;

        try{
            hasMetaMask = await this.MetaMaskService.HasMetaMask();
            isSiteConnected = await this.MetaMaskService.IsSiteConnected();
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }

        if(hasMetaMask)
        {
            await this.MetaMaskService.ConnectMetaMask();
        }

    }

    public void CloseDetails()
    {
        SubmitModalOpened = false;
    }

    public async Task SubmitPurchase()
    {
        Submited = true;

        List<Purchase> purchases = new();

        foreach(var item in BoughtItems)
        {
            purchases.Add(new Purchase()
                {
                    Amount = item.Amount,
                    Price = item.Price,
                    BoughtItemId = item.ItemId,
                    BuyerAdress = this.Adress
            });
        }

        string itemsAsJson = JsonSerializer.Serialize(purchases);
        int totalPayment = 0;

        foreach (Purchase purchase in purchases)
        {
            totalPayment += purchase.TotalPrice;
        }

        Console.WriteLine(totalPayment);

        try
        {

            var currentAdress = await MetaMaskService.GetSelectedAddress();
            foreach (Purchase purchase in purchases)
            {
                purchase.BuyerAdress = currentAdress;
                totalPayment += purchase.TotalPrice;
            }

            SendPayment(totalPayment);
            await (repo as Repository).Pay(itemsAsJson);
            await RemoveItems();
            table.Refresh();
            SubmitModalOpened = false;
            this.Adress = "";
        }
        catch (Exception e)
        {

        }
       
    }

    private async Task RemoveItems()
    {
        await localStorage.RemoveItemAsync("ItemsToBuy");
        BoughtItems.Clear();
    }

    private async void SendPayment(int amount)
    {
        var web3 = new Web3("https://goerli.infura.io/v3/e126aa853d8248adb96b087e545275f3");
        var contractAddress = "0x424126ee7ed5155c38785b2f35ef7fab295a9c85";
        var funcName = "purchase";
        var currentBuyerAdress = Adress;


        string data = GetEncodedFunctionCall(funcName);
        data = data[2..];
        var receipt = await MetaMaskService.SendTransaction(
            contractAddress,
            BigInteger.Parse(amount.ToString()),
            data);


        Console.WriteLine("TXN Hash: " + receipt.ToString());
    }


    private string GetEncodedFunctionCall(string functionName)
    {

        FunctionABI function = new FunctionABI(functionName, false);

        //Parameter[] inputsParameters = new Parameter[1];

        //function.InputParameters = inputsParameters;

        var functionCallEncoder = new FunctionCallEncoder();

        var data = functionCallEncoder.EncodeRequest(function.Sha3Signature);
        return data;
    }

}
